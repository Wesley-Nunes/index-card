generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model IndexCard {
  id           Int      @id @default(autoincrement())
  position     Int
  sceneHeading String?
  synopsis     String?
  conflict     String?
  timeline     Timeline @relation(fields: [timelineId], references: [id])
  timelineId   Int

  @@unique([timelineId, position])
}

model Timeline {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  dateOfCreation DateTime    @default(now())
  indexCards     IndexCard[]
  reality        Reality     @relation(fields: [realityId], references: [id])
  realityId      Int

  @@unique([realityId, title])
}

model Reality {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  dateOfCreation DateTime   @default(now())
  timelines      Timeline[]
  user           User       @relation(fields: [userId], references: [id])
  userId         String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  realities     Reality[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
